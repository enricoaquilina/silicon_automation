#!/usr/bin/env python3
"""
Comprehensive Test Suite for Fixed Carousel Extractor
Generated by Direct Carousel Fixer
"""

import pytest
import asyncio
import time
from pathlib import Path
import sys

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from production_browsermcp_extractor import ProductionBrowserMCPExtractor
from carousel_test_plan import TEST_SHORTCODES, SUCCESS_CRITERIA


class TestCarouselExtraction:
    """Test suite for carousel extraction functionality"""
    
    @pytest.fixture
    async def extractor(self):
        """Create extractor instance for testing"""
        extractor = ProductionBrowserMCPExtractor()
        yield extractor
        # Cleanup if needed
    
    @pytest.mark.asyncio
    async def test_navigation_reliability(self, extractor):
        """Test carousel navigation with multiple strategies"""
        # Test with known carousel post
        shortcode = "C0xFHGOrBN7"
        
        success = await extractor.navigate_to_post(shortcode)
        assert success, f"Failed to navigate to post {shortcode}"
        
        # Test navigation methods
        nav_success = await extractor.robust_carousel_navigation("next")
        assert nav_success, "Carousel navigation failed"
    
    @pytest.mark.asyncio 
    async def test_popup_handling(self, extractor):
        """Test comprehensive popup dismissal"""
        shortcode = "C0wmEEKItfR"
        
        await extractor.navigate_to_post(shortcode)
        popup_handled = await extractor.comprehensive_popup_handling()
        
        # Should return True if popups found and dismissed, or no error
        assert isinstance(popup_handled, bool)
    
    @pytest.mark.asyncio
    async def test_timing_intelligence(self, extractor):
        """Test intelligent waiting for content"""
        shortcode = "C0xMpxwKoxb"
        
        await extractor.navigate_to_post(shortcode)
        content_loaded = await extractor.intelligent_wait_for_content(timeout=30)
        
        assert content_loaded, "Content failed to load within timeout"
    
    @pytest.mark.parametrize("shortcode,expected_type", [
        ("C0xFHGOrBN7", "carousel"),
        ("C0wmEEKItfR", "carousel"), 
        ("C0xMpxwKoxb", "single"),
        ("C0wysT_LC-L", "single"),
        ("C0xLaimIm1B", "single")
    ])
    @pytest.mark.asyncio
    async def test_post_type_detection(self, extractor, shortcode, expected_type):
        """Test accurate detection of carousel vs single posts"""
        test_data = TEST_SHORTCODES.get(shortcode)
        if test_data:
            expected_images = test_data["expected_images"]
            # This would require implementing detection in extractor
            # For now, just ensure we can navigate to the post
            success = await extractor.navigate_to_post(shortcode)
            assert success, f"Failed to navigate to {shortcode}"
    
    @pytest.mark.asyncio
    async def test_extraction_accuracy(self, extractor):
        """Test extraction accuracy against success criteria"""
        test_shortcodes = ["C0xFHGOrBN7", "C0xMpxwKoxb"]
        success_count = 0
        
        for shortcode in test_shortcodes:
            try:
                success = await extractor.navigate_to_post(shortcode)
                if success:
                    success_count += 1
            except Exception as e:
                print(f"Extraction failed for {shortcode}: {e}")
        
        success_rate = success_count / len(test_shortcodes)
        target_rate = 0.95  # 95% from SUCCESS_CRITERIA
        
        assert success_rate >= target_rate, f"Success rate {success_rate:.2%} below target {target_rate:.2%}"


class TestIntegration:
    """Integration tests combining components"""
    
    @pytest.mark.asyncio
    async def test_full_extraction_workflow(self):
        """Test complete extraction workflow"""
        extractor = ProductionBrowserMCPExtractor()
        shortcode = "C0xFHGOrBN7"  # Known working test case
        
        # Full workflow test
        success = await extractor.navigate_to_post(shortcode)
        assert success, "Navigation failed"
        
        # Would test full extraction here
        # results = await extractor.extract_all_images()
        # assert len(results) > 0, "No images extracted"


if __name__ == "__main__":
    # Run tests
    pytest.main([__file__, "-v"])
