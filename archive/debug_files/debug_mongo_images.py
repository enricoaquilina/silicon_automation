#!/usr/bin/env python3
"""
Debug MongoDB images to understand what's actually saved:
- Instagram original images vs generated images
- Image sources and URLs
- GridFS content analysis
"""

from pymongo import MongoClient
from gridfs import GridFS
import json
from datetime import datetime

def debug_mongo_images():
    # Connect to MongoDB
    try:
        client = MongoClient('mongodb://192.168.0.22:27017/')
        client.admin.command('ping')
        db = client['instagram_db']
        fs = GridFS(db)
        print('‚úÖ Connected to Pi MongoDB (instagram_db)')
    except Exception as e:
        print(f'‚ùå MongoDB connection failed: {e}')
        return

    print(f'\nüîç DEBUGGING SAVED IMAGES')
    print(f'========================')

    # Get posts with images
    posts_with_images = list(db.posts.find({"image_ref": {"$exists": True}}).limit(5))
    print(f'Found {len(posts_with_images)} posts with image_ref (showing first 5)')

    for i, post in enumerate(posts_with_images, 1):
        print(f'\nüìã POST {i}: {post.get("shortcode", "unknown")}')
        print(f'   Post ID: {post["_id"]}')
        print(f'   Image Ref: {post["image_ref"]}')
        print(f'   Instagram Status: {post.get("instagram_status", "unknown")}')
        
        # Get the image document
        image_doc = db.post_images.find_one({"_id": post["image_ref"]})
        if not image_doc:
            print(f'   ‚ùå No image document found')
            continue
            
        print(f'   Image Doc ID: {image_doc["_id"]}')
        print(f'   Created At: {image_doc.get("created_at", "unknown")}')
        print(f'   Status: {image_doc.get("status", "unknown")}')
        
        # Check if this has automation info
        if "automation_info" in image_doc:
            auto_info = image_doc["automation_info"]
            print(f'   ü§ñ AUTOMATED GENERATION:')
            print(f'      Generated by: {auto_info.get("generated_by", "unknown")}')
            print(f'      Provider: {auto_info.get("provider", "unknown")}')
            print(f'      Model: {auto_info.get("model", "unknown")}')
            print(f'      Cost: ${auto_info.get("cost", 0)}')
        
        # Analyze images array
        if "images" in image_doc and image_doc["images"]:
            for img_idx, img in enumerate(image_doc["images"]):
                print(f'   \n   üñºÔ∏è  IMAGE {img_idx + 1}:')
                
                # Check midjourney generations
                if "midjourney_generations" in img:
                    generations = img["midjourney_generations"]
                    print(f'      Generations: {len(generations)}')
                    
                    for gen_idx, gen in enumerate(generations):
                        print(f'      \n      üé® GENERATION {gen_idx + 1}:')
                        print(f'         Variation: {gen.get("variation", "unknown")}')
                        print(f'         Timestamp: {gen.get("timestamp", "unknown")}')
                        
                        # Check if it has image_url (could be Instagram original)
                        if gen.get("image_url"):
                            url = gen["image_url"]
                            print(f'         Image URL: {url[:80]}...')
                            
                            # Analyze URL to determine source
                            if "instagram.com" in url or "cdninstagram.com" in url:
                                print(f'         üü° SOURCE: Instagram Original')
                            elif "replicate.delivery" in url or "replicate.com" in url:
                                print(f'         üü¢ SOURCE: Replicate Generated')
                            elif "midjourney.com" in url or "discord" in url:
                                print(f'         üü£ SOURCE: Midjourney Generated')
                            else:
                                print(f'         üî¥ SOURCE: Unknown/Other')
                        
                        # Check if it has file_id (saved to GridFS)
                        if gen.get("file_id"):
                            file_id = gen["file_id"]
                            print(f'         File ID: {file_id}')
                            
                            # Try to get file from GridFS
                            try:
                                grid_file = fs.get(file_id)
                                print(f'         üìÅ GridFS File:')
                                print(f'            Filename: {grid_file.filename}')
                                print(f'            Content Type: {grid_file.content_type}')
                                print(f'            Size: {grid_file.length} bytes')
                                print(f'            Upload Date: {grid_file.upload_date}')
                                
                                # Check metadata
                                if hasattr(grid_file, 'metadata') and grid_file.metadata:
                                    print(f'            Metadata keys: {list(grid_file.metadata.keys())}')
                                    if 'brand' in grid_file.metadata:
                                        print(f'            Brand: {grid_file.metadata["brand"]}')
                                    if 'automated' in grid_file.metadata:
                                        print(f'            Automated: {grid_file.metadata["automated"]}')
                                    if 'pipeline' in grid_file.metadata:
                                        print(f'            Pipeline: {grid_file.metadata["pipeline"]}')
                                        
                            except Exception as e:
                                print(f'         ‚ùå GridFS file not found: {e}')
                        
                        # Check for prompt
                        if gen.get("prompt"):
                            prompt = gen["prompt"]
                            print(f'         Prompt: {prompt[:100]}...')
                            
                            # Analyze prompt to determine if it's generated or original
                            if "SiliconSentiments" in prompt:
                                print(f'         üéØ PROMPT TYPE: SiliconSentiments Branded')
                            elif any(word in prompt.lower() for word in ["neural", "quantum", "cybernetic", "algorithm"]):
                                print(f'         üéØ PROMPT TYPE: Tech/AI Themed')
                            else:
                                print(f'         üéØ PROMPT TYPE: Generic/Other')

    # Check GridFS files directly
    print(f'\nüíæ GRIDFS FILES ANALYSIS')
    print(f'=======================')
    
    try:
        # Get all files in GridFS
        all_files = list(fs.find().limit(10))
        print(f'Total GridFS files: {fs.find().count()}')
        print(f'Showing first 10 files:')
        
        for i, grid_file in enumerate(all_files, 1):
            print(f'\n{i}. {grid_file.filename}')
            print(f'   Size: {grid_file.length} bytes')
            print(f'   Upload Date: {grid_file.upload_date}')
            print(f'   Content Type: {grid_file.content_type}')
            
            if hasattr(grid_file, 'metadata') and grid_file.metadata:
                metadata = grid_file.metadata
                if 'brand' in metadata:
                    print(f'   Brand: {metadata["brand"]}')
                if 'automated' in metadata:
                    print(f'   Automated: {metadata["automated"]}')
                if 'pipeline' in metadata:
                    print(f'   Pipeline: {metadata["pipeline"]}')
                if 'original_description' in metadata:
                    desc = metadata["original_description"]
                    print(f'   Original Description: {desc[:80]}...')
                    
    except Exception as e:
        print(f'‚ùå GridFS analysis failed: {e}')

    # Summary
    print(f'\nüìä SUMMARY')
    print(f'==========')
    print(f'From this analysis you can see:')
    print(f'1. Whether saved images are Instagram originals or AI generated')
    print(f'2. If VLM pipeline has been used (look for automation_info)')
    print(f'3. Image sources from URLs (Instagram vs Replicate vs Midjourney)')
    print(f'4. GridFS file metadata showing generation pipeline details')

    client.close()

if __name__ == "__main__":
    debug_mongo_images()