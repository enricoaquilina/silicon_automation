{
  "permissions": {
    "allow": [
      "Bash(git clone:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(REPLICATE_API_TOKEN=r8_DTcueB8nJVEKhQSoPTdcq2PfD7anS3i3WZEAn python generate_instagram_db_images.py)",
      "Bash(./venv/bin/python:*)",
      "Bash(REPLICATE_API_TOKEN=r8_DTcueB8nJVEKhQSoPTdcq2PfD7anS3i3WZEAn timeout 300 ./venv/bin/python generate_instagram_db_images.py)",
      "Bash(REPLICATE_API_TOKEN=r8_DTcueB8nJVEKhQSoPTdcq2PfD7anS3i3WZEAn ./venv/bin/python batch_image_processor.py)",
      "Bash(REPLICATE_API_TOKEN=r8_DTcueB8nJVEKhQSoPTdcq2PfD7anS3i3WZEAn ./venv/bin/python debug_batch_generator.py)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(REPLICATE_API_TOKEN=r8_DTcueB8nJVEKhQSoPTdcq2PfD7anS3i3WZEAn ./venv/bin/python vlm_to_flux_pipeline.py)",
      "Bash(brew install:*)",
      "Bash(chromedriver:*)",
      "Bash(google-chrome:*)",
      "Bash(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version)",
      "Bash(grep:*)",
      "Bash(timeout:*)",
      "Bash(rm:*)",
      "Bash(pip3 install:*)",
      "Bash(pip3 uninstall:*)",
      "Bash(mkdir:*)",
      "Bash(pkill:*)",
      "Bash(gtimeout:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(claude mcp:*)",
      "mcp__browsermcp__browser_navigate",
      "Bash(touch:*)",
      "Bash(if [ -z \"$REPLICATE_API_TOKEN\" ])",
      "Bash(then)",
      "Bash(else)",
      "Bash(fi)",
      "Bash(mv:*)",
      "mcp__browsermcp__browser_wait",
      "mcp__browsermcp__browser_snapshot",
      "mcp__browsermcp__browser_press_key",
      "mcp__browsermcp__browser_click",
      "mcp__browsermcp__browser_screenshot",
      "mcp__browsermcp__browser_hover",
      "mcp__browsermcp__browser_get_console_logs",
      "WebFetch(domain:replicate.com)",
      "Bash(cp:*)",
      "Bash(# Set audio file path\nAUDIO_FILE=\"04_videos/C0xFHGOrBN7_multimedia_recraft_v2_audio.mp3\"\n\necho \"üé¨ Creating model compilations with audio...\"\necho \"üéµ Using audio: $AUDIO_FILE\"\n\n# Function to create compilation for a model\ncreate_model_compilation() {\n    MODEL=$1\n    echo \"\"\n    echo \"üìπ Creating $MODEL compilation...\"\n    \n    VIDEO_DIR=\"${MODEL}_model/videos/individual\"\n    OUTPUT_FILE=\"${MODEL}_model/videos/SiliconSentiments_${MODEL}_compilation_with_audio.mp4\"\n    CONCAT_FILE=\"${MODEL}_model/videos/${MODEL}_concat.txt\"\n    \n    # Count videos\n    VIDEO_COUNT=$(ls \"$VIDEO_DIR\"/*.mp4 2>/dev/null | wc -l)\n    \n    if [ \"$VIDEO_COUNT\" -eq 0 ]; then\n        echo \"   ‚ö†Ô∏è $MODEL: No videos found\"\n        return\n    fi\n    \n    echo \"   üìã Found $VIDEO_COUNT videos for $MODEL\"\n    \n    # Create concat file\n    rm -f \"$CONCAT_FILE\"\n    for video in $(ls \"$VIDEO_DIR\"/*.mp4 | sort); do\n        echo \"file '$(realpath \"$video\")'\" >> \"$CONCAT_FILE\"\n    done\n    \n    # Create compilation with audio\n    if [ -f \"$AUDIO_FILE\" ]; then\n        ffmpeg -y -f concat -safe 0 -i \"$CONCAT_FILE\" -i \"$AUDIO_FILE\" \\\n               -c:v copy -c:a aac -shortest \\\n               -map 0:v:0 -map 1:a:0 \"$OUTPUT_FILE\" 2>/dev/null\n        \n        if [ $? -eq 0 ] && [ -f \"$OUTPUT_FILE\" ]; then\n            SIZE=$(stat -f%z \"$OUTPUT_FILE\" 2>/dev/null || stat -c%s \"$OUTPUT_FILE\" 2>/dev/null)\n            SIZE_MB=$((SIZE / 1024 / 1024))\n            echo \"   ‚úÖ $MODEL: Created with audio - ${VIDEO_COUNT} videos, ${SIZE_MB}MB\"\n        else\n            echo \"   ‚ùå $MODEL: Failed to create compilation\"\n        fi\n    else\n        echo \"   ‚ùå Audio file not found: $AUDIO_FILE\"\n    fi\n    \n    # Clean up\n    rm -f \"$CONCAT_FILE\"\n}\n\n# Create compilations for each model\ncreate_model_compilation \"recraft\"\ncreate_model_compilation \"flux\"  \ncreate_model_compilation \"sdxl\"\ncreate_model_compilation \"kandinsky\"\n\necho \"\"\necho \"üéâ All model compilations complete!\")"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}